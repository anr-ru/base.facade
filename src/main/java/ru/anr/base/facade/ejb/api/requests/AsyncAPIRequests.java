/*
 * Copyright 2014-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package ru.anr.base.facade.ejb.api.requests;

import com.fasterxml.jackson.core.type.TypeReference;
import org.springframework.messaging.Message;
import ru.anr.base.domain.api.MethodTypes;
import ru.anr.base.domain.api.models.RequestModel;

import javax.validation.constraints.NotNull;
import java.util.Map;

/**
 * This service is a tiny wrapper to hide the serialization procedures and
 * sending API messages via JMS.
 *
 * @author Alexey Romanchuk
 * @created Nov 20, 2015
 */
public interface AsyncAPIRequests {

    /**
     * Generates a model based on the provided message body using the class
     *
     * @param message Original JMS message
     * @param clazz   The class to use
     * @param <S>     The model's type
     * @return A model generated by the message
     */
    <S> S toModel(@NotNull Message<String> message, Class<S> clazz);

    /**
     * Generates a new message by the provided model and message's headers
     *
     * @param model   The model to use
     * @param headers The message's headers
     * @return A new created message
     */
    Message<String> toMessage(@NotNull Object model, Map<String, Object> headers);

    /**
     * Performs sending a new query to the request queue
     *
     * @param id      The identifier of API strategy
     * @param version The version of the strategy
     * @param method  A method to use
     * @param model   A request model
     * @param params  A list of parameters
     * @return The identifier of the query (because the processing is pure
     * asynchronous
     */
    String query(String id, String version, MethodTypes method, RequestModel model, Object... params);

    /**
     * Performs sending a new query but without a need to receive a response.
     *
     * @param id      The identifier of API strategy
     * @param version The version of the strategy
     * @param method  A method to use
     * @param model   A request model
     * @param params  A list of parameters
     * @return The identifier of the query (because the processing is pure
     * asynchronous
     */
    String noResponseQuery(String id, String version, MethodTypes method, RequestModel model, Object... params);

    /**
     * Pulls the response from the requests queue by the specified identifier of
     * the request
     *
     * @param queryId       The identifier of the query
     * @param responseClass The class for the response model
     * @param <S>           The type of the object
     * @return An object instance
     */
    <S> S getResponse(String queryId, Class<S> responseClass);

    /**
     * Pulls the pure string response from the response queue
     *
     * @param queryId The identifier of the query
     * @return The response model as a string
     */
    String getResponse(String queryId);

    /**
     * Pulls the response for a more complex case when the response model is a
     * complex type like, for instance, a list of some objects.
     *
     * @param queryId The identifier of the query
     * @param ref     {@link TypeReference} object to use
     * @param <S>     The type of the object
     * @return The object corresponding to the type
     */
    <S> S getResponse(String queryId, TypeReference<S> ref);
}
